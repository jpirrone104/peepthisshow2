{"version":3,"sources":["components/MemeCard/index.js","components/Wrapper/index.js","components/Title/index.js","App.js","serviceWorker.js","index.js"],"names":["MemeCard","props","react_default","a","createElement","className","alt","name","src","image","onClick","clickPicture","id","Wrapper","children","Title","App","state","images","clickedArray","topScore","score","message","shakeit","shuffledArray","_this","shuffleArray","setState","includes","length","concat","picturesArray","i","j","Math","floor","random","_ref","_this2","this","components_Wrapper","components_Title","map","components_MemeCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"k2BAWeA,SARE,SAAAC,GAAK,OAClBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,MAAOC,QAAS,kBAAMT,EAAMU,aAAaV,EAAMW,gBCEzEC,MAJf,SAAiBZ,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMa,iBCG1BC,MAJf,SAAed,GACb,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASJ,EAAMa,kBCmFvBE,6MAxEbC,MAAQ,CACNC,SACAC,aAAc,GACdC,SAAU,EACVC,MAAO,EACPC,QAAS,GACTC,QAAS,WAEXZ,aAAe,SAAAC,GAEb,IAAMY,EAAgBC,EAAKC,aAAaR,GACxCO,EAAKE,SAAS,CAACT,OAAQM,IAEnBC,EAAKR,MAAME,aAAaS,SAAShB,GACnCa,EAAKE,SAAS,CAAEN,MAAO,EAAGF,aAAc,GAAIG,QAAS,oEAA2DC,QAAS,SAC7E,KAAnCE,EAAKR,MAAME,aAAaU,OACjCJ,EAAKE,SAAS,CAAEN,MAAO,EAAGF,aAAc,GAAIG,QAAS,WAAYC,QAAS,SAEpEE,EAAKR,MAAME,aAAaU,OAAS,IACvCJ,EAAKE,SAAS,CACZR,aAAcM,EAAKR,MAAME,aAAaW,OAAO,CAAClB,IAC9CS,MAAOI,EAAKR,MAAMI,MAAQ,EAC1BC,QAAS,YACTC,QAAS,UAITE,EAAKR,MAAMI,MAAQI,EAAKR,MAAMG,UAChCK,EAAKE,SAAS,CAAEP,SAAUK,EAAKR,MAAMI,WAIzCK,aAAe,SAACK,GACZ,IAAK,IAAIC,EAAID,EAAcF,OAAS,EAAGG,EAAI,EAAGA,IAAK,CAC/C,IAAMC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADKK,EAER,CAACN,EAAcE,GAAIF,EAAcC,IAAvED,EAAcC,GAFgCK,EAAA,GAE5BN,EAAcE,GAFcI,EAAA,GAInD,OAAON,2EAEF,IAAAO,EAAAC,KACP,OACErC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAMbH,EAAAC,EAAAC,cAACoC,EAAD,KACAtC,EAAAC,EAAAC,cAACqC,EAAD,sBACAvC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aACZH,EAAAC,EAAAC,cAAA,2FACAF,EAAAC,EAAAC,cAAA,KAAGC,UAAY,SAAQH,EAAAC,EAAAC,cAAA,wBAAgBmC,KAAKtB,MAAMI,MAA3B,gBAA+CkB,KAAKtB,MAAMG,WACjFlB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAUH,EAAAC,EAAAC,cAAA,cAASmC,KAAKtB,MAAMK,YAG5CiB,KAAKtB,MAAMC,OAAOwB,IAAI,SAAAjC,GAAK,OAC1BP,EAAAC,EAAAC,cAACuC,EAAD,CACEhC,aAAc2B,EAAK3B,aAEnBC,GAAIH,EAAMG,GACVgC,IAAKnC,EAAMG,GACXH,MAAOA,EAAMA,MACbF,KAAME,EAAMF,kBAhENsC,aCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.972749ac.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst MemeCard = props => (\n    <div className=\"card\">\n        <img alt={props.name} src={props.image} onClick={() => props.clickPicture(props.id)}/>\n    </div>\n   \n  );\n\n\nexport default MemeCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","/* eslint-disable no-unused-expressions */\nimport React, { Component } from \"react\";\nimport MemeCard from \"./components/MemeCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport images from \"./images.json\";\n\n// class App extends Component {\n//   // Setting this.state.friends to the friends json array\n//   state = {\n       \n//         images: images, \n//   };\nclass App extends Component {\n  // Setting this.state.images to the images json array\n  state = {\n    images,\n    clickedArray: [],\n    topScore: 0,\n    score: 0,\n    message: \"\",\n    shakeit: \"false\"\n  };\n  clickPicture = id => {\n    // Arrange the pictures in a random manner\n    const shuffledArray = this.shuffleArray(images);\n    this.setState({images: shuffledArray});\n    // if clicked an image already clicked set this.state.score = 0; empty clickeadArray, end of if block\n    if (this.state.clickedArray.includes(id)) {\n      this.setState({ score: 0, clickedArray: [], message: \"Incorrect!! Game Over ☹️ Click an image to start again!\", shakeit: \"true\"});\n    } else if (this.state.clickedArray.length === 12){\n      this.setState({ score: 0, clickedArray: [], message: \"You Win!\", shakeit: \"true\"})\n    }\n    else if(this.state.clickedArray.length < 12){\n      this.setState({\n        clickedArray: this.state.clickedArray.concat([id]),\n        score: this.state.score + 1,\n        message: \"Correct!!\",\n        shakeit: \"false\"\n      });\n    } \n    // set topscore = score if score>topscore.\n    if (this.state.score > this.state.topScore) {\n      this.setState({ topScore: this.state.score });\n    }\n    // shake the wrapper if shakeit is set to true\n  }\n  shuffleArray = (picturesArray) => {\n      for (let i = picturesArray.length - 1; i > 0; i--) {\n          const j = Math.floor(Math.random() * (i + 1));\n          [picturesArray[i], picturesArray[j]] = [picturesArray[j], picturesArray[i]];\n      }\n      return picturesArray;\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        {/* <h3 className=\"App-intro\">\n          <strong>Click on an image to earn points, but don't click on any, more than once!</strong> \n          <p className = \"score\"><strong>Score: {this.state.score} | TopScore: {this.state.topScore}</strong></p>\n          <p className=\"message\"><strong>{this.state.message}</strong></p>\n        </h3> */}\n        <Wrapper>\n        <Title>Peep This Show\n        <h3 className=\"App-intro\">\n          <strong>Click on an image to earn points, but don't click on any, more than once!</strong> \n          <p className = \"score\"><strong>Score: {this.state.score} | TopScore: {this.state.topScore}</strong></p>\n          <p className=\"message\"><strong>{this.state.message}</strong></p>\n        </h3>\n        </Title>\n        {this.state.images.map(image => (\n          <MemeCard\n            clickPicture={this.clickPicture}\n            // removeFriend={this.removeFriend}\n            id={image.id}\n            key={image.id}\n            image={image.image}\n            name={image.name}\n          />\n          ))}\n      </Wrapper>\n      </div>\n    );\n  }\n  \n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}